from create_bot import bot
from aiogram.dispatcher.filters import Text
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from create_bot import check_sub_channels
from config import NOT_SUB_MESSAGE
import datetime
from statistics import get_today_statistics, get_month_statistics, get_all_time_statistics
from keyboards.all_keyboards import *
from data_base import data_functions
from aiogram.types import InputFile


class FilmsStateGroup(StatesGroup):
    title = State()
    photo = State()
    url = State()


class FindFilmStateGroup(StatesGroup):
    title = State()


async def delete_film_instruction(message: types.Message):
    await bot.send_message(message.from_user.id,
                           text="–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º –Ω–∞–ø–∏—à–∏—Ç–µ: '–£–¥–∞–ª–∏—Ç—å <–Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞>'",
                           reply_markup=get_back_admin_keyboard())


async def back_main_menu(message: types.Message, state: FSMContext):
    if state is None:
        await message.answer('üè†', reply_markup=get_admin_keyboard())
        return
    await state.finish()
    await message.answer('üè†', reply_markup=get_admin_keyboard())


async def find_film_number(message: types.Message):
    await message.answer(text="–í–≤–µ–¥–∏—Ç–µ <–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞> (<–≥–æ–¥>)'",
                         reply_markup=get_cancel_search_keyboard())
    await FindFilmStateGroup.title.set()


async def cancel_search(message: types.Message, state: FSMContext):
    if state is None:
        await message.reply("–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞", reply_markup=get_admin_keyboard())
        return
    await state.finish()
    await message.reply("–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞", reply_markup=get_admin_keyboard())


async def find_film_id(message: types.Message, state: FSMContext):
    find_film = await data_functions.show_film_id(message.text)
    if find_film is None:
        await message.answer("–¢–∞–∫–æ–≥–æ —Ñ–∏–ª—å–º–∞ –≤ –±–¥ –Ω–µ—Ç\n"
                             "–ò–ª–∏ –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä–µ–∫—Ç–µ–Ω")
    else:
        await message.answer(f"–ù–æ–º–µ—Ä –í–∞—à–µ–≥–æ —Ñ–∏–ª—å–º–∞: {find_film}")
    await state.finish()


async def display_all_films(message: types.Message):
    result = "\n".join(str(film[0])+' '+film[1] for film in await data_functions.show_all_films())
    await message.answer(result)


async def statistic_menu(message: types.Message):
    await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏", reply_markup=get_statistic_keyboard())


async def today_statistic(message: types.Message):
    await message.answer(await get_today_statistics())


async def month_statistic(message: types.Message):
    await message.answer(await get_month_statistics())


async def all_time_statistic(message: types.Message):
    await message.answer(await get_all_time_statistics())


async def delete_film(message: types.Message):
    if message.from_user.id == 617073201:
        if message.text.count(' ') != 1:
            await message.answer("–í–≤–æ–¥ –Ω–µ–∫–æ—Ä–µ–∫—Ç–µ–Ω")
        else:
            film_number = message.text.split()[1]
            film_delete_verification = await data_functions.show_film_title(film_number)
            await bot.send_message(message.from_user.id, "–≠—Ç–æ—Ç —Ñ–∏–ª—å–º –í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?")
            await bot.send_message(message.from_user.id,
                                   text=film_delete_verification[0],
                                   reply_markup=get_delete_keyboard())
    else:
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–º. –í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞!")


async def del_film(callback: types.CallbackQuery):
    if callback.data == "time_delete":
        await data_functions.delete_film(callback.message.text)
        await bot.send_message(callback.from_user.id,
                               text="–§–∏–ª—å–º –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                               reply_markup=get_admin_keyboard())
    else:
        await bot.send_message(callback.from_user.id, "–§–∏–ª—å–º –Ω–µ –±—ã–ª —É–¥–∞–ª–µ–Ω", reply_markup=get_admin_keyboard())


async def subscribed_result(callback: types.CallbackQuery):
    await bot.delete_message(callback.from_user.id, callback.message.message_id)
    if await check_sub_channels(CHANNELS, callback.from_user.id):
        await bot.send_message(callback.from_user.id, text="<em>–î–æ—Å—Ç—É–ø –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç</em>", parse_mode="HTML")
        await data_functions.add_user(callback.from_user.id, datetime.datetime.now())

        await bot.send_message(chat_id=callback.from_user.id,
                               text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º</b>üîé",
                               parse_mode="HTML",
                               reply_markup=get_search_keyboard())
    else:
        await bot.send_message(callback.from_user.id, NOT_SUB_MESSAGE, reply_markup=show_channels_keyboard())


async def cancel_function(message: types.Message, state: FSMContext):
    if state is None:
        await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ—Ä–≤–∞–ª–∏ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∏–ª—å–º–∞", reply_markup=get_admin_keyboard())
        return
    await state.finish()
    await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ—Ä–≤–∞–ª–∏ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∏–ª—å–º–∞", reply_markup=get_admin_keyboard())


async def add_film(message: types.Message):
    await bot.send_message(message.from_user.id,
                           text="–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ —Å –≥–æ–¥–æ–º",
                           reply_markup=get_cancel_keyboard()
                           )
    await FilmsStateGroup.title.set()


async def add_title(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["title"] = message.text
    await bot.send_message(message.from_user.id, "–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ")
    await FilmsStateGroup.next()


async def load_photo(message: types.Message, state: FSMContext):
    print(message.photo)
    async with state.proxy() as data:
        data['photo'] = str(message.text)
    await bot.send_message(message.from_user.id, "–î–∞–ª—å—à–µ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∏–ª—å–º")
    await FilmsStateGroup.next()


# async def invalid_photo(message: types.Message):
#     await message.reply("–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ñ–æ—Ç–æ")


async def load_url(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['url'] = str(message.text)
    await data_functions.add_film(data)
    await state.finish()
    await bot.send_message(message.from_user.id, "–§–∏–ª—å–º –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
    await bot.send_message(message.from_user.id,
                           text=f"–ù–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–µ–π—á–∞—Å –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {await data_functions.show_last_film_id()}",
                           reply_markup=get_admin_keyboard())


async def download_data_base_command(message: types.Message):
    await bot.send_document(message.from_user.id, InputFile('main_data_base.db'))


def register_admin_handlers(disp: Dispatcher):
    disp.register_message_handler(delete_film_instruction, Text("–£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å–ºüóë"))
    disp.register_message_handler(back_main_menu, Text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"), state='*')
    disp.register_message_handler(find_film_number, Text("–ù–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞üîé"))
    disp.register_message_handler(cancel_search, Text("–û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞"), state='*')
    disp.register_message_handler(find_film_id, state=FindFilmStateGroup.title)
    disp.register_message_handler(display_all_films, Text("–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∏–ª—å–º–æ–≤üçø"))
    disp.register_message_handler(statistic_menu, Text("–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—åüë∂"))
    disp.register_message_handler(today_statistic, Text("–î–µ–Ω—å"))
    disp.register_message_handler(month_statistic, Text("–ú–µ—Å—è—Ü"))
    disp.register_message_handler(all_time_statistic, Text("–í—Å–µ –≤—Ä–µ–º—è"))
    disp.register_message_handler(delete_film, lambda text: text.text.startswith("–£–¥–∞–ª–∏—Ç—å"))
    disp.register_callback_query_handler(del_film, lambda text: text.data.endswith('delete'))
    disp.register_callback_query_handler(subscribed_result, text="subscribed")

    disp.register_message_handler(cancel_function, Text("–û—Ç–º–µ–Ω–∞"), state='*')
    disp.register_message_handler(add_film, Text("–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–ºüé•"))
    disp.register_message_handler(add_title, state=FilmsStateGroup.title)
    disp.register_message_handler(load_photo, state=FilmsStateGroup.photo)
    # disp.register_message_handler(invalid_photo, lambda message: not message.photo, state=FilmsStateGroup.photo)
    disp.register_message_handler(load_url, state=FilmsStateGroup.url)
    disp.register_message_handler(download_data_base_command, Text("–°–∫–∞—á–∞—Ç—å –±–¥üóÇÔ∏è"))
